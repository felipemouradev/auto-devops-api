apiVersion: apps/v1
kind: Deployment
metadata:
  name: '{{ include "scaffoldhelm.fullname" . }}-{{ .Values.deployConfigs.namespace}}'
  labels:
    app.kubernetes.io/name: '{{ include "scaffoldhelm.name" . }}'
    helm.sh/chart: '{{ include "scaffoldhelm.chart" . }}'
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
spec:
  replicas: "{{ .Values.replicaCount }}"
  selector:
    matchLabels:
      app.kubernetes.io/name: '{{ include "scaffoldhelm.name" . }}'
      app.kubernetes.io/instance: '{{ .Release.Name }}'
  template:
    metadata:
      labels:
        app.kubernetes.io/name: '{{ include "scaffoldhelm.name" . }}'
        app.kubernetes.io/instance: '{{ .Release.Name }}'
    spec:
      imagePullSecrets:
        - name: '{{ .Values.imagePullSecrets.name }}'
      containers:
        - name: "app"
          image: "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}"
          resources:
            requests:
              memory: "{{ .Values.requests.memory }}"
              cpu: "{{ .Values.requests.cpu }}"
            limits:
              memory: "{{ .Values.limits.memory }}"
              cpu: "{{ .Values.limits.cpu }}"
          env:
          - name: NODE_ENV
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.nameOverride }}-{{ .Values.deployConfigs.namespace }}"
                key: NODE_ENV
          imagePullPolicy: "{{ .Values.app.image.pullPolicy }}"
          ports:
            - name: "{{ .Values.nameOverride }}-http"
              containerPort:  "{{ .Values.app.container.port }}"
              protocol: TCP
      nodeSelector: {}
      affinity: {}
      tolerations: {}
